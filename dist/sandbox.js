!function(e,r){if("object"==typeof exports&&"object"==typeof module)module.exports=r();else if("function"==typeof define&&define.amd)define([],r);else{var n=r();for(var t in n)("object"==typeof exports?exports:e)[t]=n[t]}}(window,(function(){return function(e){var r={};function n(t){if(r[t])return r[t].exports;var s=r[t]={i:t,l:!1,exports:{}};return e[t].call(s.exports,s,s.exports,n),s.l=!0,s.exports}return n.m=e,n.c=r,n.d=function(e,r,t){n.o(e,r)||Object.defineProperty(e,r,{enumerable:!0,get:t})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,r){if(1&r&&(e=n(e)),8&r)return e;if(4&r&&"object"==typeof e&&e&&e.__esModule)return e;var t=Object.create(null);if(n.r(t),Object.defineProperty(t,"default",{enumerable:!0,value:e}),2&r&&"string"!=typeof e)for(var s in e)n.d(t,s,function(r){return e[r]}.bind(null,s));return t},n.n=function(e){var r=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(r,"a",r),r},n.o=function(e,r){return Object.prototype.hasOwnProperty.call(e,r)},n.p="",n(n.s=0)}([function(e,r,n){"use strict";function t(e,r){r===t.priority.TAIL_FIRST&&(e=e.slice(0).reverse(),r=t.priority.HEAD_FIRST),e.forEach((function(e,r){"^"!==e.lex_reg.source[0]&&(e.lex_reg=new RegExp("^"+e.lex_reg.source))})),this.parse=function(n){if(!e)return null;for(var s=n.length,o=0,i=[];o<s;){for(var u=null,p="",a=0,l=e.length;a<l;a++){var c=e[a],f=n.match(c.lex_reg);if(f&&0===f.index)if(r===t.priority.HEAD_FIRST){if(!u){u=f,p=c.lex_type;break}}else r===t.priority.LONG_FIRST?(!u||f[0].length>u[0].length)&&(u=f,p=c.lex_type):r===t.priority.SHORT_FIRST&&(!u||f[0].length<u[0].length)&&(u=f,p=c.lex_type)}if(!u)return null;"IGNORE"!==p&&i.push(new t.token(u[0],p)),n=n.substring(u[0].length),o+=u[0].length}return i},this.destroy=function(){for(var r=0,n=e.length;r<n;r++)e[r]=null;e=null}}n.r(r),n.d(r,"sandbox",(function(){return A})),t.priority={HEAD_FIRST:1,TAIL_FIRST:2,LONG_FIRST:3,SHORT_FIRST:4},t.token=function(e,r){this.lexeme=e,this.type=r};var s=t;function o(){0}function i(){if(1===arguments.length)return arguments[0];for(var e=[],r=0,n=arguments.length;r<n;r++)e[r]=arguments[r];return e}function u(e,r){return new s.token("privateSymbol"+r+"_"+e,"GRAMMAR_SYM")}var p=function(e,r,n,t){var p=new s(e,r),a={},l={},c=0,f=t+"_pi";n[f]=[t,[function(){}]];var x,m=[],h={},E=1,_=new s([{lex_type:"GRAMMAR_EMPTY",lex_reg:/GRAMMAR_EMPTY/},{lex_type:"GRAMMAR_ZERO_OR_MORE",lex_reg:/\*/},{lex_type:"GRAMMAR_ONE_OR_MORE",lex_reg:/\+/},{lex_type:"GRAMMAR_ZERO_OR_ONE",lex_reg:/\?/},{lex_type:"GRAMMAR_LEFT_BRACKET",lex_reg:/\(/},{lex_type:"GRAMMAR_RIGHT_BRACKET",lex_reg:/\)/},{lex_type:"GRAMMAR_OR",lex_reg:/\|/},{lex_type:"GRAMMAR_QUOTE_SYM",lex_reg:/'[^\s]+?'/},{lex_type:"GRAMMAR_SYM",lex_reg:/[^\s]+/},{lex_type:"IGNORE",lex_reg:/\s+/}],s.priority.HEAD_FIRST);for(var v in function(e){for(var r in e){var n=_.parse(e[r][0]);n.forEach((function(e){"GRAMMAR_QUOTE_SYM"===e.type&&(e.type="GRAMMAR_SYM",e.lexeme=e.lexeme.substring(1,e.lexeme.length-1))})),e[r][0]=n}}(n),function(e){function r(n){for(var t=0;t<n.length;t++)if("GRAMMAR_LEFT_BRACKET"===n[t].type){for(var s=0,o=[],p=n.length,a=t+1;!(a>=p||0===s&&"GRAMMAR_RIGHT_BRACKET"===n[a].type);)o.push(n[a]),"GRAMMAR_LEFT_BRACKET"===n[a].type&&s++,"GRAMMAR_RIGHT_BRACKET"===n[a].type&&s--,a++;if(a>=p)throw new Error("grammar driver error");newsymbol=h[o.map((function(e){return e.lexeme})).join("")],newsymbol||(newsymbol=u("group",E++),h[o.map((function(e){return e.lexeme})).join("")]=newsymbol,e[newsymbol.lexeme]=[],e[newsymbol.lexeme][0]=o,e[newsymbol.lexeme][1]=i,r(e[newsymbol.lexeme][0])),n.splice(t,a-t+1,newsymbol),t--}}for(var n in e)r(e[n][0])}(n),function(e){for(var r in e){var n=e[r][0];e[r][0]=[];var t=[];n.forEach((function(n){"GRAMMAR_OR"===n.type?(e[r][0].push(t),t=[]):t.push(n)})),t.length&&e[r][0].push(t)}}(n),function(e){function r(n){for(var t=0;t<n.length;t++)if(("GRAMMAR_ZERO_OR_MORE"===n[t].type||"GRAMMAR_ONE_OR_MORE"===n[t].type||"GRAMMAR_ZERO_OR_ONE"===n[t].type)&&n[t-1]){var o=h[n[t-1].lexeme+n[t].lexeme];o?n.splice(t-1,2,o):(o=u("list",E++),h[n[t-1].lexeme+n[t].lexeme]=o,e[o.lexeme]=[],"GRAMMAR_ZERO_OR_MORE"===n[t].type?e[o.lexeme][0]=[[new s.token(n[t-1].lexeme,"GRAMMAR_SYM"),new s.token(o.lexeme,"GRAMMAR_SYM")],[new s.token("GRAMMAR_EMPTY","GRAMMAR_EMPTY")],[i,function(){return"GRAMMAR_EMPTY"}]]:"GRAMMAR_ONE_OR_MORE"===n[t].type?e[o.lexeme][0]=[[new s.token(n[t-1].lexeme,"GRAMMAR_SYM"),new s.token(o.lexeme,"GRAMMAR_SYM")],[new s.token(n[t-1].lexeme,"GRAMMAR_SYM")],[i,function(){return"GRAMMAR_EMPTY"}]]:"GRAMMAR_ZERO_OR_ONE"===n[t].type&&(e[o.lexeme][0]=[[new s.token(n[t-1].lexeme,"GRAMMAR_SYM")],[new s.token("GRAMMAR_EMPTY","GRAMMAR_EMPTY")],[i,function(){return"GRAMMAR_EMPTY"}]]),n.splice(t-1,2,o),e[o.lexeme][0].forEach((function(e){r(e)}))),t--}}for(var n in e)e[n][0].forEach((function(e){r(e)}))}(n),n){n[v][0].forEach((function(e){e.forEach((function(e){"GRAMMAR_SYM"===e.type&&m.indexOf(e.lexeme)<0&&m.push(e.lexeme)}))})),a[c]=v,l[v]=c++}function g(e,r,n){return[e,r,n]}x={},e.forEach((function(e){x[e.lex_type]=1})),m.forEach((function(e){if(!(e in x)&&!(e in n))throw new Error(e+" is not defined")})),o("privateSymbolMap",h),o("id2entity",a);var y={};function R(e){if(e in y)return y[e];for(var r=n[e][0],t=[],s=0,o=r.length;s<o;s++){if("GRAMMAR_EMPTY"===r[s][0].type)return!0;for(var i=r[s].map((function(e){return y[e.lexeme]})),u=!1,p=0,a=i.length;p<a;p++){if(!1===i[p]){u=!1;break}void 0===i[p]&&(u=void 0)}if(p===a&&void 0!==u)return!0;t.push(u)}for(s=0,o=t.length;s<o;s++)if(void 0===t[s])return;return!1}m.forEach((function(e){e in n||(y[e]=!1)})),o("symbollist",m);for(var A=m.length;A;){var M=!1;if(m.forEach((function(e){var r=R(e);void 0!==r?y[e]=r:M=!0})),!M)break;A--}A||m.forEach((function(e){e in y||(y[e]=!1)})),o("emptySet",y);var w={},d=[];function b(e,r){if(w[e])return w[e];if(r.indexOf(e)>=0){for(var t=0,s=d.length;t<s;t++){for(var o=0,i=r.length;o<i&&!(d[t].indexOf(r[o])>=0);o++);if(o<i){r.slice(r.indexOf(e)).forEach((function(e){d[t].indexOf(e)<0&&d[t].push(e)}));break}}return t===s&&d.push(r.slice(r.indexOf(e))),[]}if(e in n){r.push(e);var u=n[e][0],p=[];return y[e]&&p.push("GRAMMAR_EMPTY"),u.forEach((function(n){for(var t=0,s=n.length;t<s;t++){if(n[t].lexeme!==e)b(n[t].lexeme,r).forEach((function(e){"GRAMMAR_EMPTY"!==e&&(p.indexOf(e)>=0||p.push(e))}));if(!y[n[t].lexeme])return}})),w[e]=p,r.pop(),w[e]}return w[e]=[e],w[e]}m.forEach((function(e){b(e,[])})),o("firstCycle",d),d.forEach((function(e){var r=[];e.forEach((function(e){w[e].forEach((function(e){r.indexOf(e)<0&&r.push(e)})),w[e]=r}))})),o("first",w);var S={};function N(e,r){for(var n=r,t=e.length;n<t;n++)if(!y[e[n].lexeme])return!1;return!0}S[t]=["GRAMMAR_END"],m.forEach((function(e){var r;e in n&&n[r=e][0].forEach((function(e){for(var t=0,s=e.length-1;t<s;t++)if(e[t].lexeme in n){var o=e[t].lexeme,i=t+1;S[o]=S[o]||[];var u=S[o];do{var p=b(e[i].lexeme);p.forEach((function(e){"GRAMMAR_EMPTY"!==e&&u.indexOf(e)<0&&u.push(e)})),i++}while(i<s&&p.indexOf("GRAMMAR_EMPTY")>=0);N(e,t+1)&&(S[r]=S[r]||[],S[o].indexOf(S[r])<0&&S[o].push(S[r]))}e[e.length-1].lexeme in n&&(o=e[e.length-1].lexeme,S[o]=S[o]||[],S[r]=S[r]||[],S[o].indexOf(S[r])<0&&S[o].push(S[r]))}))})),function(e){function r(e){var r=[];return e.forEach((function(n){n.forEach((function(n){n instanceof Array?e.indexOf(n)<0&&r.indexOf(n)<0&&r.push(n):r.indexOf(n)<0&&r.push(n)}))})),r}var n=[],t=[];for(var s in e)if(!(t.indexOf(e[s])>=0))for(;;){for(n.push(e[s]);n.length;){for(var o=!1,i=n[n.length-1],u=0,p=i.length;u<p;u++)if(i[u]instanceof Array){if(o=!0,n.indexOf(i[u])>=0){var a=[],l=n.indexOf(i[u]);for(u=n.length-1;u>=l;u--)a.push(n[u]),n.pop();var c=r(a);a.forEach((function(r){for(var n in e)e[n]===r?e[n]=c:e[n].indexOf(r)>=0&&e[n].splice(e[n].indexOf(r),1,c)}))}else n.push(i[u]);break}if(!o){t.indexOf(i)<0&&t.push(i);var f=n[n.length-2];f&&(i.forEach((function(e){f.indexOf(e)<0&&f.push(e)})),f.splice(f.indexOf(i),1)),n.pop()}}if(t.indexOf(e[s])>=0)break}}(S),o("followSet",S);var I=[];I[0]=[g(l[f],0,0)];var O={};O[I[0]]=0;var G={};function T(e){for(var r=0;r<e.length;r++){var t=e[r],s=n[a[t[0]]][0][t[1]][t[2]];if(s&&void 0!==l[s.lexeme])if(G[s.lexeme])G[s.lexeme].forEach((function(r){e.indexOf(r)<0&&e.push(r)}));else{G[s.lexeme]=[];for(var o=0,i=n[s.lexeme][0].length;o<i;o++){var u=g(l[s.lexeme],o,0);G[s.lexeme].push(u),e.indexOf(u)<0&&e.push(u)}}}}var L={},P={};!function(e){for(var r=0;r<e.length;r++){T(e[r]);var t={};for(var s in e[r].forEach((function(e){var r=e,s=n[a[r[0]]][0][r[1]];if(s.length>r[2]){var o=s[r[2]],i=g(r[0],r[1],r[2]+1);t[o.lexeme]=t[o.lexeme]||[],t[o.lexeme].push(i)}})),L[r]=L[r]||{},t){var o=t[s].join("|");void 0!==O[o]?L[r][s]=O[o]:(L[r][s]=O[o]=e.length,e.push(t[s]))}}for(var r in L)for(var s in P[r]=P[r]||{},L[r])P[r][s]=P[r][s]||[],P[r][s].push(["p",L[r][s]]);for(r in e)P[r]=P[r]||{},e[r].forEach((function(e){var t=e,s=a[t[0]];if(n[s][0][t[1]].length===t[2]){if(s===f)return void(P[r].GRAMMAR_END=["a"]);S[s].forEach((function(n){P[r][n]=P[r][n]||[],P[r][n].push(["r"].concat(e))}))}}))}(I),o("grammar",n),o("GOTO",L),o("ACTION",P),o("I",I),l=null,d=null,h=null,w=null,y=null,S=null,O=null,I=null,G=null,m=null,this.parse=function(e){var r=p.parse(e);if(o("tokenlist",r),!r||!r.length)return null;function t(e){this.val=e}r.push(new s.token("","GRAMMAR_END"));for(var i=[],u=[],l=null,c=[0],f=0,x=0,m=r.length,h=r[0];;){if(x===m-1&&P[c[f]].GRAMMAR_END&&"a"===P[c[f]].GRAMMAR_END[0]){console.log("accept"),i=[];break}var E=void 0,_=null;if(void 0!==P[c[f]][h.type]?(E=P[c[f]][h.type],_=h):void 0!==P[c[f]].GRAMMAR_EMPTY&&(E=P[c[f]].GRAMMAR_EMPTY,_=new s.token("GRAMMAR_EMPTY","GRAMMAR_EMPTY")),void 0===E){for(;i.length;){var v=i[i.length-1];if(v.cur!==v.actlist.length-1){o("again"),c=v.stack,x=v.i,f=c.length-1,h=r[x],_=v.n,v.cur++,l=v.actlist[v.cur],u=v.symbolStack;break}"GRAMMAR_EMPTY"!==v.n.type&&void 0!==P[v.stack[v.stack.length-1]].GRAMMAR_EMPTY?(v.n=new s.token("GRAMMAR_EMPTY","GRAMMAR_EMPTY"),v.actlist=P[v.stack[v.stack.length-1]].GRAMMAR_EMPTY,v.cur=-1):i.pop()}if(!i.length){console.log("error"),i=[];break}}else i.push({actlist:E,i:x,n:_,stack:c.slice(0),cur:0,symbolStack:u.slice(0)}),l=E[0];if("p"===l[0])c.push(parseInt(l[1])),o("push",_.lexeme),u.push(new t(_.lexeme)),f++,"GRAMMAR_EMPTY"!=_.type&&++x<m&&(h=r[x]);else if("r"===l[0]){var g=a[parseInt(l[1],10)];o("reduce",g);var y=parseInt(l[2],10),R=n[g][0][y],A=null;"function"==typeof n[g][1]?A=n[g][1]:n[g][1]instanceof Array?A=n[g][1][y]:void 0===n[g][1]&&(A=function(){return arguments[0]});for(var M=R.length,w=[];M--;)w.push(u.pop()),c.pop(),f--;var d=A.apply(null,w.reverse().map((function(e){return e.val})));L[c[f]][g]&&(u.push(new t(d)),c.push(L[c[f]][g]),f++)}}return u[0].val},this.destroy=function(){for(var e in p.destroy(),p=null,_.destroy(),_=null,L=null,P=null,n)n[e]=null}},a=[{lex_type:"break",lex_reg:/break/},{lex_type:"do",lex_reg:/do/},{lex_type:"instanceof",lex_reg:/instanceof/},{lex_type:"typeof",lex_reg:/typeof/},{lex_type:"case",lex_reg:/case/},{lex_type:"else",lex_reg:/else/},{lex_type:"new",lex_reg:/new/},{lex_type:"var",lex_reg:/var/},{lex_type:"catch",lex_reg:/catch/},{lex_type:"finally",lex_reg:/finally/},{lex_type:"return",lex_reg:/return/},{lex_type:"void",lex_reg:/void/},{lex_type:"continue",lex_reg:/continue/},{lex_type:"for",lex_reg:/for/},{lex_type:"switch",lex_reg:/switch/},{lex_type:"while",lex_reg:/while/},{lex_type:"debugger",lex_reg:/debugger/},{lex_type:"function",lex_reg:/function/},{lex_type:"this",lex_reg:/this/},{lex_type:"with",lex_reg:/with/},{lex_type:"default",lex_reg:/default/},{lex_type:"if",lex_reg:/if/},{lex_type:"throw",lex_reg:/throw/},{lex_type:"delete",lex_reg:/delete/},{lex_type:"in",lex_reg:/in/},{lex_type:"try",lex_reg:/try/},{lex_type:"class",lex_reg:/class/},{lex_type:"enum",lex_reg:/enum/},{lex_type:"extends",lex_reg:/extends/},{lex_type:"super",lex_reg:/super/},{lex_type:"const",lex_reg:/const/},{lex_type:"export",lex_reg:/export/},{lex_type:"import",lex_reg:/import/},{lex_type:"implements",lex_reg:/implements/},{lex_type:"let",lex_reg:/let/},{lex_type:"private",lex_reg:/private/},{lex_type:"public",lex_reg:/public/},{lex_type:"interface",lex_reg:/interface/},{lex_type:"package",lex_reg:/package/},{lex_type:"protected",lex_reg:/protected/},{lex_type:"static",lex_reg:/static/},{lex_type:"yield",lex_reg:/yield/},{lex_type:"get",lex_reg:/get/},{lex_type:"set",lex_reg:/set/},{lex_type:"NullLiteral",lex_reg:/null/},{lex_type:"BooleanLiteral",lex_reg:/(true|false)/},{lex_type:"Identifier",lex_reg:/(\$|_|[a-zA-Z])(\$|_|[0-9a-zA-Z])*/},{lex_type:"{",lex_reg:/\{/},{lex_type:"}",lex_reg:/\}/},{lex_type:"(",lex_reg:/\(/},{lex_type:")",lex_reg:/\)/},{lex_type:"[",lex_reg:/\[/},{lex_type:"]",lex_reg:/\]/},{lex_type:".",lex_reg:/\./},{lex_type:";",lex_reg:/;/},{lex_type:",",lex_reg:/,/},{lex_type:"<",lex_reg:/</},{lex_type:">",lex_reg:/>/},{lex_type:"<=",lex_reg:/<=/},{lex_type:">=",lex_reg:/>=/},{lex_type:"==",lex_reg:/==/},{lex_type:"!=",lex_reg:/!=/},{lex_type:"===",lex_reg:/===/},{lex_type:"!==",lex_reg:/!==/},{lex_type:"+",lex_reg:/\+/},{lex_type:"-",lex_reg:/-/},{lex_type:"*",lex_reg:/\*/},{lex_type:"%",lex_reg:/%/},{lex_type:"++",lex_reg:/\+\+/},{lex_type:"--",lex_reg:/--/},{lex_type:"<<",lex_reg:/<</},{lex_type:">>",lex_reg:/>>/},{lex_type:">>>",lex_reg:/>>>/},{lex_type:"&",lex_reg:/&/},{lex_type:"|",lex_reg:/|/},{lex_type:"^",lex_reg:/^/},{lex_type:"!",lex_reg:/!/},{lex_type:"~",lex_reg:/~/},{lex_type:"&&",lex_reg:/&&/},{lex_type:"||",lex_reg:/||/},{lex_type:"?",lex_reg:/\?/},{lex_type:":",lex_reg:/:/},{lex_type:"+=",lex_reg:/\+=/},{lex_type:"-=",lex_reg:/-=/},{lex_type:"*=",lex_reg:/\*=/},{lex_type:"%=",lex_reg:/%=/},{lex_type:"<<=",lex_reg:/<<=/},{lex_type:">>=",lex_reg:/>>=/},{lex_type:">>>=",lex_reg:/>>>=/},{lex_type:"&=",lex_reg:/&=/},{lex_type:"|=",lex_reg:/|=/},{lex_type:"^=",lex_reg:/\^=/},{lex_type:"/",lex_reg:/\//},{lex_type:"/=",lex_reg:/\/=/},{lex_type:"=",lex_reg:/=/},{lex_type:"NumericLiteral",lex_reg:/((0|[1-9][0-9]*)\.[0-9]*((e|E)(\+|-)?[0-9]+)?|\.[0-9]+((e|E)(\+|-)?[0-9]+)?|(0|[1-9][0-9]*)((e|E)(\+|-)?[0-9]+)?|0(x|X)[0-9a-fA-F]+)/},{lex_type:"StringLiteral",lex_reg:/("[^"]*"|'[^']*')/},{lex_type:"IGNORE",lex_reg:/(\s+|\/\/.*\n|\/\*(\n|.)*?\*\/)/}];function l(){this.prev=null,this.table={},this.type=""}function c(){this.structname="",this.oprs=[]}function f(){this.funcname="",this.scope=new l,this.params=[],this.oprs=[],this.runscope=null,this.context=null,this.prototype={constructor:this},this.call=function(e){this.context=e;for(var r=[],n=1;n<arguments.length;n++)r.push(arguments[n]);return g(this,r)},this.apply=function(e,r){return this.context=e,g(this,r)}}function x(e,r){for(var n=r;n;){if("object"==typeof n.table){if(e in n.table)return n.table}else if(void 0!==n.table[e])return n.table;n=n.prev}throw new Error(e+" is not defined")}var m=new f,h=m.scope,E=h,_=[];var v={IdentifierName:["Identifier | ReservedWord",[function(e){var r=new c;return r.structname="id",r.oprs.push(e),r},function(){}]],ReservedWord:["break | do | instanceof | typeof | case | else | new | var | catch | finally | return | void | continue | for | switch | while | debugger | function | this | with | default | if | throw | delete | in | try | class | enum | extends | super | const | export | import | NullLiteral | BooleanLiteral",function(e){return e}],Literal:["NullLiteral | BooleanLiteral | NumericLiteral | StringLiteral",[function(e){var r=new c;return r.structname="nullliter",r},function(e){var r=new c;return r.structname="boolliter",r.oprs.push(e),r},function(e){var r=new c;return r.structname="numliter",r.oprs.push(e),r},function(e){var r=new c;return r.structname="strliter",r.oprs.push(e.slice(1,e.length-1)),r}]],PrimaryExpression:["this | Identifier | Literal | ArrayLiteral | ObjectLiteral | '(' Expression ')'",[function(e){var r=new c;return r.structname="this",r},function(e){var r=new c;return r.structname="id",r.oprs.push(e),r},function(e){return e},function(e){return e},function(e){return e},function(e,r,n){return r}]],ArrayLiteral:["'[' Elision ? ']' | '[' ElementList ']' | '[' ElementList ',' Elision ? ']'",[function(e,r,n){var t=new c;if(t.structname="arrliter","GRAMMAR_EMPTY"!=r)for(var s=0;s<r.length;s++)t.oprs.push(void 0);return t},function(e,r,n){var t=new c;return t.structname="arrliter",t.oprs=r,t},function(e,r,n,t,s){var o=new c;if(o.structname="arrliter",o.oprs=r,"GRAMMAR_EMPTY"!=t)for(var i=0;i<t.length;i++)o.oprs.push(void 0);return o}]],ElementList:["Elision ? AssignmentExpression | ElementList ',' Elision ? AssignmentExpression",[function(e,r){var n=[];if("GRAMMAR_EMPTY"!=e)for(var t=0;t<e.length;t++)n.push(void 0);return n.push(r),n},function(e,r,n,t){if("GRAMMAR_EMPTY"!=n)for(var s=0;s<n.length;s++)e.push(void 0);return e.push(t),e}]],Elision:["',' | Elision ','",[function(e){return[e]},function(e,r){return e.push(r),e}]],ObjectLiteral:["'{' '}' | '{' PropertyNameAndValueList '}' | '{' PropertyNameAndValueList ',' '}'",[function(){var e=new c;return e.structname="objliter",e},function(e,r){var n=new c;return n.structname="objliter",n.oprs=r,n},function(e,r){var n=new c;return n.structname="objliter",n.oprs=r,n}]],PropertyNameAndValueList:["PropertyAssignment | PropertyNameAndValueList ',' PropertyAssignment",[function(e){return[e]},function(e,r,n){return e.push(n),e}]],PropertyAssignment:["PropertyName ':' AssignmentExpression | get PropertyName '(' ')' '{' FunctionBody '}' | set PropertyName '(' PropertySetParameterList ')' '{' FunctionBody '}'",[function(e,r,n){var t=new c;return t.structname="propertyassignment",t.oprs.push(e),t.oprs.push(n),t}]],PropertyName:["IdentifierName | StringLiteral | NumericLiteral",[function(e){return e},function(e){var r=new c;return r.structname="strliter",r.oprs.push(e.slice(1,e.length-1)),r},function(e){var r=new c;return r.structname="numliter",r.oprs.push(e),r}]],PropertySetParameterList:["Identifier",function(e){var r=new c;return r.structname="id",r.oprs.push(e),r}],MemberExpression:["PrimaryExpression | FunctionExpression | MemberExpression '[' Expression ']' | MemberExpression '.' IdentifierName | new MemberExpression Arguments",[function(e){return e},function(e){return e},function(e,r,n,t){var s=new c;return s.structname="memberexp",s.oprs.push(e),s.oprs.push(n),s},function(e,r,n){var t=new c;return t.structname="memberexp",t.oprs.push(e),t.oprs.push(n),t},function(e,r,n){var t=new c;return t.structname="new",t.oprs.push(r),t.oprs.push(n),t}]],NewExpression:["MemberExpression | new NewExpression",[function(e){return e},function(e,r){var n=new c;return n.structname="new",n.oprs.push(r),n}]],CallExpression:["MemberExpression Arguments | CallExpression Arguments | CallExpression '[' Expression ']' | CallExpression '.' IdentifierName",[function(e,r){var n=new c;return n.structname="call",n.oprs.push(e),n.oprs.push(r),n},function(e,r){var n=new c;return n.structname="call",n.oprs.push(e),n.oprs.push(r),n},function(e,r,n,t){var s=new c;return s.structname="callgetmember",s.oprs.push(e),s.oprs.push(n),s},function(e,r,n){var t=new c;return t.structname="callgetmember",t.oprs.push(e),t.oprs.push(n),t}]],Arguments:["'(' ')' | '(' ArgumentList ')'",[function(){var e=new c;return e.structname="args",e},function(e,r,n){var t=new c;return t.structname="args",t.oprs=r,t}]],ArgumentList:["AssignmentExpression | ArgumentList ',' AssignmentExpression",[function(e){return[e]},function(e,r,n){return e.push(n),e}]],LeftHandSideExpression:["NewExpression | CallExpression",function(e){return e}],PostfixExpression:["LeftHandSideExpression | LeftHandSideExpression '++' | LeftHandSideExpression '--'",[function(e){return e},function(e){var r=new c;return r.structname="post++",r.oprs.push(e),r},function(e){var r=new c;return r.structname="post--",r.oprs.push(e),r}]],UnaryExpression:["PostfixExpression | delete UnaryExpression | void UnaryExpression | typeof UnaryExpression | '++' UnaryExpression | '--' UnaryExpression | '+' UnaryExpression | '-' UnaryExpression | '~' UnaryExpression | '!' UnaryExpression",[function(e){return e},function(e,r){var n=new c;return n.structname="delete",n.oprs.push(r),n},function(e,r){var n=new c;return n.structname="void",n.oprs.push(r),n},function(e,r){var n=new c;return n.structname="typeof",n.oprs.push(r),n},function(e,r){var n=new c;return n.structname="prefix++",n.oprs.push(r),n},function(e,r){var n=new c;return n.structname="prefix--",n.oprs.push(r),n},function(e,r){var n=new c;return n.structname="positive",n.oprs.push(r),n},function(e,r){var n=new c;return n.structname="negative",n.oprs.push(r),n},function(e,r){var n=new c;return n.structname="~",n.oprs.push(r),n},function(e,r){var n=new c;return n.structname="!",n.oprs.push(r),n}]],MultiplicativeExpression:["UnaryExpression | MultiplicativeExpression '*' UnaryExpression | MultiplicativeExpression '/' UnaryExpression | MultiplicativeExpression '%' UnaryExpression",[function(e){return e},function(e,r,n){var t=new c;return t.structname="*",t.oprs.push(e),t.oprs.push(n),t},function(e,r,n){var t=new c;return t.structname="/",t.oprs.push(e),t.oprs.push(n),t},function(e,r,n){var t=new c;return t.structname="%",t.oprs.push(e),t.oprs.push(n),t}]],AdditiveExpression:["MultiplicativeExpression | AdditiveExpression '+' MultiplicativeExpression | AdditiveExpression '-' MultiplicativeExpression",[function(e){return e},function(e,r,n){var t=new c;return t.structname="+",t.oprs.push(e),t.oprs.push(n),t},function(e,r,n){var t=new c;return t.structname="-",t.oprs.push(e),t.oprs.push(n),t}]],ShiftExpression:["AdditiveExpression | ShiftExpression '<<' AdditiveExpression | ShiftExpression '>>' AdditiveExpression | ShiftExpression '>>>' AdditiveExpression",[function(e){return e},function(e,r,n){var t=new c;return t.structname="<<",t.oprs.push(e),t.oprs.push(n),t},function(e,r,n){var t=new c;return t.structname=">>",t.oprs.push(e),t.oprs.push(n),t},function(e,r,n){var t=new c;return t.structname=">>>",t.oprs.push(e),t.oprs.push(n),t}]],RelationalExpression:["ShiftExpression | RelationalExpression '<' ShiftExpression | RelationalExpression '>' ShiftExpression | RelationalExpression '<=' ShiftExpression | RelationalExpression '>=' ShiftExpression | RelationalExpression instanceof ShiftExpression | RelationalExpression in ShiftExpression",[function(e){return e},function(e,r,n){var t=new c;return t.structname="<",t.oprs.push(e),t.oprs.push(n),t},function(e,r,n){var t=new c;return t.structname=">",t.oprs.push(e),t.oprs.push(n),t},function(e,r,n){var t=new c;return t.structname="<=",t.oprs.push(e),t.oprs.push(n),t},function(e,r,n){var t=new c;return t.structname=">=",t.oprs.push(e),t.oprs.push(n),t},function(e,r,n){var t=new c;return t.structname="instanceof",t.oprs.push(e),t.oprs.push(n),t},function(e,r,n){var t=new c;return t.structname="in",t.oprs.push(e),t.oprs.push(n),t}]],RelationalExpressionNoIn:["ShiftExpression | RelationalExpressionNoIn '<' ShiftExpression | RelationalExpressionNoIn '>' ShiftExpression | RelationalExpressionNoIn '<=' ShiftExpression | RelationalExpressionNoIn '>=' ShiftExpression | RelationalExpressionNoIn instanceof ShiftExpression",[function(e){return e},function(e,r,n){var t=new c;return t.structname="<",t.oprs.push(e),t.oprs.push(n),t},function(e,r,n){var t=new c;return t.structname=">",t.oprs.push(e),t.oprs.push(n),t},function(e,r,n){var t=new c;return t.structname="<=",t.oprs.push(e),t.oprs.push(n),t},function(e,r,n){var t=new c;return t.structname=">=",t.oprs.push(e),t.oprs.push(n),t},function(e,r,n){var t=new c;return t.structname="instanceof",t.oprs.push(e),t.oprs.push(n),t}]],EqualityExpression:["RelationalExpression | EqualityExpression '==' RelationalExpression | EqualityExpression '!=' RelationalExpression | EqualityExpression '===' RelationalExpression | EqualityExpression '!==' RelationalExpression",[function(e){return e},function(e,r,n){var t=new c;return t.structname="==",t.oprs.push(e),t.oprs.push(n),t},function(e,r,n){var t=new c;return t.structname="!=",t.oprs.push(e),t.oprs.push(n),t},function(e,r,n){var t=new c;return t.structname="===",t.oprs.push(e),t.oprs.push(n),t},function(e,r,n){var t=new c;return t.structname="!==",t.oprs.push(e),t.oprs.push(n),t}]],EqualityExpressionNoIn:["RelationalExpressionNoIn | EqualityExpressionNoIn '==' RelationalExpressionNoIn | EqualityExpressionNoIn '!=' RelationalExpressionNoIn | EqualityExpressionNoIn '===' RelationalExpressionNoIn | EqualityExpressionNoIn '!==' RelationalExpressionNoIn",[function(e){return e},function(e,r,n){var t=new c;return t.structname="==",t.oprs.push(e),t.oprs.push(n),t},function(e,r,n){var t=new c;return t.structname="!=",t.oprs.push(e),t.oprs.push(n),t},function(e,r,n){var t=new c;return t.structname="===",t.oprs.push(e),t.oprs.push(n),t},function(e,r,n){var t=new c;return t.structname="!==",t.oprs.push(e),t.oprs.push(n),t}]],BitwiseANDExpression:["EqualityExpression | BitwiseANDExpression '&' EqualityExpression",[function(e){return e},function(e,r,n){var t=new c;return t.structname="&",t.oprs.push(e),t.oprs.push(n),t}]],BitwiseANDExpressionNoIn:["EqualityExpressionNoIn | BitwiseANDExpressionNoIn '&' EqualityExpressionNoIn",[function(e){return e},function(e,r,n){var t=new c;return t.structname="&",t.oprs.push(e),t.oprs.push(n),t}]],BitwiseXORExpression:["BitwiseANDExpression | BitwiseXORExpression '^' BitwiseANDExpression",[function(e){return e},function(e,r,n){var t=new c;return t.structname="^",t.oprs.push(e),t.oprs.push(n),t}]],BitwiseXORExpressionNoIn:["BitwiseANDExpressionNoIn | BitwiseXORExpressionNoIn '^' BitwiseANDExpressionNoIn",[function(e){return e},function(e,r,n){var t=new c;return t.structname="^",t.oprs.push(e),t.oprs.push(n),t}]],BitwiseORExpression:["BitwiseXORExpression | BitwiseORExpression '|' BitwiseXORExpression",[function(e){return e},function(e,r,n){var t=new c;return t.structname="|",t.oprs.push(e),t.oprs.push(n),t}]],BitwiseORExpressionNoIn:["BitwiseXORExpressionNoIn | BitwiseORExpressionNoIn '|' BitwiseXORExpressionNoIn",[function(e){return e},function(e,r,n){var t=new c;return t.structname="|",t.oprs.push(e),t.oprs.push(n),t}]],LogicalANDExpression:["BitwiseORExpression | LogicalANDExpression '&&' BitwiseORExpression",[function(e){return e},function(e,r,n){var t=new c;return t.structname="&&",t.oprs.push(e),t.oprs.push(n),t}]],LogicalANDExpressionNoIn:["BitwiseORExpressionNoIn | LogicalANDExpressionNoIn '&&' BitwiseORExpressionNoIn",[function(e){return e},function(e,r,n){var t=new c;return t.structname="&&",t.oprs.push(e),t.oprs.push(n),t}]],LogicalORExpression:["LogicalANDExpression | LogicalORExpression '||' LogicalANDExpression",[function(e){return e},function(e,r,n){var t=new c;return t.structname="||",t.oprs.push(e),t.oprs.push(n),t}]],LogicalORExpressionNoIn:["LogicalANDExpressionNoIn | LogicalORExpressionNoIn '||' LogicalANDExpressionNoIn",[function(e){return e},function(e,r,n){var t=new c;return t.structname="||",t.oprs.push(e),t.oprs.push(n),t}]],ConditionalExpression:["LogicalORExpression | LogicalORExpression '?' AssignmentExpression ':' AssignmentExpression",[function(e){return e},function(e,r,n,t,s){var o=new c;o.structname="condexp",o.oprs.push(e,n,s)}]],ConditionalExpressionNoIn:["LogicalORExpressionNoIn | LogicalORExpressionNoIn '?' AssignmentExpression ':' AssignmentExpressionNoIn",[function(e){return e},function(e,r,n,t,s){var o=new c;o.structname="condexp",o.oprs.push(e,n,s)}]],AssignmentExpression:["ConditionalExpression | LeftHandSideExpression '=' AssignmentExpression | LeftHandSideExpression AssignmentOperator AssignmentExpression",[function(e){return e},function(e,r,n){var t=new c;return t.structname="=",t.oprs.push(e,n),t},function(e,r,n){var t=new c;return t.structname=r,t.oprs.push(e,n),t}]],AssignmentExpressionNoIn:["ConditionalExpressionNoIn | LeftHandSideExpression '=' AssignmentExpressionNoIn | LeftHandSideExpression AssignmentOperator AssignmentExpressionNoIn",[function(e){return e},function(e,r,n){var t=new c;return t.structname="=",t.oprs.push(e,n),t},function(e,r,n){var t=new c;return t.structname=r,t.oprs.push(e,n),t}]],AssignmentOperator:["'*=' | '/=' | '%=' | '+=' | '-=' | '<<=' | '>>=' | '>>>=' | '&=' | '^=' | '|='",[function(){return"*="},function(){return"/="},function(){return"%="},function(){return"+="},function(){return"-="},function(){return"<<="},function(){return">>="},function(){return">>>="},function(){return"&="},function(){return"^="},function(){return"|="}]],Expression:["AssignmentExpression | Expression ',' AssignmentExpression",[function(e){var r=new c;return r.structname="exp",r.oprs.push(e),r},function(e,r,n){return e.oprs.push(n),e}]],ExpressionNoIn:["AssignmentExpressionNoIn | ExpressionNoIn ',' AssignmentExpressionNoIn",[function(e){return[e]},function(e,r){return e.push(r),e}]],Statement:["Block | VariableStatement | EmptyStatement | ExpressionStatement | IfStatement | IterationStatement | ContinueStatement | BreakStatement | ReturnStatement | WithStatement | LabelledStatement | SwitchStatement | ThrowStatement | TryStatement | DebuggerStatement",function(e){return e}],Block:["'{' StatementList ? '}'",[function(e,r,n){return"GRAMMAR_EMPTY"==r?[]:r}]],StatementList:["Statement | StatementList Statement",[function(e){return e instanceof Array?e:[e]},function(e,r){return e.push(r),e}]],VariableStatement:["var VariableDeclarationList ';' ?",function(e,r,n){return r}],VariableDeclarationList:["VariableDeclaration | VariableDeclarationList ',' VariableDeclaration",[function(e){return e?[e]:[]},function(e,r,n){return n&&e.push(n),e}]],VariableDeclarationListNoIn:["VariableDeclarationNoIn | VariableDeclarationListNoIn ',' VariableDeclarationNoIn",[function(e){return e?[e]:[]},function(e,r,n){return n&&e.push(n),e}]],VariableDeclaration:["Identifier Initialiser ?",[function(e,r){if(E.table[e]=void 0,"GRAMMAR_EMPTY"!=r){var n=new c;return n.structname="init",(t=new c).structname="id",t.oprs.push(e),n.oprs.push(t),n.oprs.push(r),n}var t;return(t=new c).structname="id",t.oprs.push(e),t}]],VariableDeclarationNoIn:["Identifier InitialiserNoIn ?",[function(e,r){if(E.table[e]=void 0,"GRAMMAR_EMPTY"!=r){var n=new c;return n.structname="init",(t=new c).structname="id",t.oprs.push(e),n.oprs.push(t),n.oprs.push(r),n}var t;return(t=new c).structname="id",t.oprs.push(e),t}]],Initialiser:["'=' AssignmentExpression",function(e,r){return r}],InitialiserNoIn:["'=' AssignmentExpressionNoIn",function(e,r){return r}],EmptyStatement:["';'",function(){var e=new c;return e.structname="empty",e}],ExpressionStatement:["Expression ';' ?",[function(e,r){return e}]],IfStatement:["if '(' Expression ')' Statement else Statement | if '(' Expression ')' Statement",[function(e,r,n,t,s,o,i){var u=new c;return u.structname="ifelse",u.oprs.push(n,s,i),u},function(e,r,n,t,s){var o=new c;return o.structname="if",o.oprs.push(n,s),o}]],IterationStatement:["do Statement while '(' Expression ')' ';' ? | while '(' Expression ')' Statement | for '(' ExpressionNoIn ? ';' Expression ? ';' Expression ? ')' Statement | for '(' var VariableDeclarationListNoIn ';' Expression ? ';' Expression ? ')' Statement | for '(' LeftHandSideExpression in Expression ')' Statement | for '(' var VariableDeclarationNoIn in Expression ')' Statement",[function(e,r,n,t,s,o){var i=new c;return i.structname="dowhile",i.oprs.push(s),i.oprs.push(r),i},function(e,r,n,t,s){var o=new c;return o.structname="while",o.oprs.push(n),o.oprs.push(s),o},function(e,r,n,t,s,o,i,u,p){var a=new c;return a.structname="for","GRAMMAR_EMPTY"==n&&(n=null),"GRAMMAR_EMPTY"==s&&(s=null),"GRAMMAR_EMPTY"==i&&(i=null),a.oprs.push([n,s,i]),a.oprs.push(p),a},function(e,r,n,t,s,o,i,u,p,a){var l=new c;return l.structname="for","GRAMMAR_EMPTY"==o&&(o=null),"GRAMMAR_EMPTY"==u&&(u=null),l.oprs.push([t,o,u]),l.oprs.push(a),l},function(e,r,n,t,s,o,i){var u=new c;return u.structname="forin",u.oprs.push([n,s]),u.oprs.push(i),u},function(e,r,n,t,s,o,i,u){var p=new c;return p.structname="forin",p.oprs.push([t,o]),p.oprs.push(u),p}]],ContinueStatement:["continue ';' ? | continue Identifier ';' ?",function(){var e=new c;return e.structname="continue",e}],BreakStatement:["break ';' ? | break Identifier ';' ?",function(e){var r=new c;return r.structname="break",r}],ReturnStatement:["return ';' ? | return Expression ';' ?",[function(e){var r=new c;return r.structname="return",r},function(e,r,n){var t=new c;return t.structname="return",t.oprs.push(r),t}]],WithStatement:["with '(' Expression ')' Statement",function(e,r,n,t,s){var o=new c;return o.structname="with",o.oprs.push(n,s),o}],SwitchStatement:["switch '(' Expression ')' CaseBlock",function(e,r,n,t,s){var o=new c;return o.structname="switch",o.oprs.push(n),o.oprs.push(s),o}],CaseBlock:["'{' CaseClauses ? '}' | '{' CaseClauses ? DefaultClause ? '}' | '{' CaseClauses ? DefaultClause ? CaseClauses '}'",[function(e,r,n){return"GRAMMAR_EMPTY"==r?[]:r},function(e,r,n,t){var s=[];return"GRAMMAR_EMPTY"!=r&&(s=s.concat(r)),"GRAMMAR_EMPTY"!=n&&s.push(n),s},function(e,r,n,t,s){var o=[];return"GRAMMAR_EMPTY"!=r&&(o=o.concat(r)),"GRAMMAR_EMPTY"!=n&&o.push(n),o=o.concat(t)}]],CaseClauses:["CaseClause | CaseClauses CaseClause",[function(e){return[e]},function(e,r){return e.push(r),e}]],CaseClause:["case Expression ':' StatementList ?",function(e,r,n,t){var s=new c;return s.structname="case",s.oprs.push(r),"GRAMMAR_EMPTY"!=t&&s.oprs.push(t),s}],DefaultClause:["default ':' StatementList ?",function(e,r,n){var t=new c;return t.structname="default","GRAMMAR_EMPTY"!=n&&t.oprs.push(n),t}],LabelledStatement:["Identifier ':' Statement"],ThrowStatement:["throw Expression ';' ?"],TryStatement:["try Block Catch | try Block Finally | try Block Catch Finally"],Catch:["catch '(' Identifier ')' Block"],Finally:["finally Block"],DebuggerStatement:["debugger ';' ?"],FuncDef:["function",function(){var e=new f;e.scope.prev=E,E=e.scope,_.push(e)}],FunctionDeclaration:["FuncDef Identifier '(' FormalParameterList ? ')' '{' FunctionBody '}'",function(e,r,n,t,s,o,i,u){var p=_[_.length-1];"GRAMMAR_EMPTY"!=t&&(p.params=t),p.oprs=i,p.funcname=r,E.prev.table[r]=p,E=E.prev,_.pop()}],FunctionExpression:["FuncDef Identifier ? '(' FormalParameterList ? ')' '{' FunctionBody '}'",function(e,r,n,t,s,o,i,u){"GRAMMAR_EMPTY"==r&&(r=function(){for(var e="abcdefghijklmnopqrstuvwsyzABCDEFGHIJKLMNOPQRSTUVWXYZ",r=e.length,n="",t=0;t<5;t++)n+=e[parseInt(Math.random()*r)];return"nickfunc_"+n}());var p=_[_.length-1];"GRAMMAR_EMPTY"!=t&&(p.params=t),p.oprs=i,p.funcname=r,E.prev.table[r]=p,E=E.prev,_.pop();var a=new c;return a.structname="id",a.oprs.push(r),a}],FormalParameterList:["Identifier | FormalParameterList ',' Identifier",[function(e){var r=new c;return r.structname="id",r.oprs.push(e),[r]},function(e,r,n){return e.push(n),e}]],FunctionBody:["SourceElements ?",function(e){return"GRAMMAR_EMPTY"==e?[]:e}],Program:["SourceElements ?",function(e){return m.oprs=e,e}],SourceElements:["SourceElement | SourceElements SourceElement",[function(e){var r=[];return e&&(e instanceof Array?r=r.concat(e):r.push(e)),r},function(e,r){return r&&(r instanceof Array?e=e.concat(r):e.push(r)),e}]],SourceElement:["Statement | FunctionDeclaration",function(e){return e}]};function g(e,r){r=r||[];var n=new l;for(var t in e.scope.table){n.table[t]=e.scope.table[t];var s=n.table[t];if(s instanceof f){var o=new f;o.funcname=s.funcname,o.scope=s.scope,o.params=s.params,o.oprs=s.oprs,o.runscope=n,o.prototype=s.prototype,n.table[t]=o}}n.table.this=e.context,n.prev=e.runscope;for(var i=0;i<e.params.length;i++)n.table[e.params[i].oprs[0]]=r[i];for(i=0;i<e.oprs.length;i++){var u=y(e.oprs[i],n);if(u&&"return"==u.op)return u.v}}function y(e,r){if("ifelse"==e.structname){t=R(e.oprs[0],r)?e.oprs[1]:e.oprs[2];for(var n=0;n<t.length;n++){if((E=y(t[n],r))&&"return"==E.op)return E}}else if("if"==e.structname){if(R(e.oprs[0],r)){var t=e.oprs[1];for(n=0;n<t.length;n++){if((E=y(t[n],r))&&"return"==E.op)return E}}}else if("switch"==e.structname){var s=R(e.oprs[0],r),o=-1,i=-1;if(!(t=e.oprs[1])||!t.length)return;for(n=0;n<t.length;n++){if("case"==t[n].structname)if((a=R(t[n].oprs[0],r))===s){o=n;break}"default"==t[n].structname&&(i=n)}if(-1==o&&-1!=i&&(o=i),o>=0)for(n=o;n<t.length;n++){var u=1;if("default"==t[n].structname&&(u=0),t[n].oprs[u]&&t[n].oprs[u].length>0)for(var p=0;p<t[n].oprs[u].length;p++){if((E=y(t[n].oprs[u][p],r))&&"break"==E.op)return;if(E&&"return"==E.op)return E}}}else if("with"==e.structname){var a=R(e.oprs[0],r),c=new l;c.prev=r,c.table=a,c.type="with";var f=e.oprs[1];for(n=0;n<f.length;n++){if(E=y(f[n],c)){if("break"==E.op)return;if("continue"==E.op)continue;if("return"==E.op)return E}}}else if("for"==e.structname){t=e.oprs[0],f=e.oprs[1];if(t[0]instanceof Array)for(n=0;n<t[0].length;n++)y(t[0][n],r);else t[0]&&y(t[0],r);for(;;){if(t[1])if(!(s=R(t[1],r)))break;for(n=0;n<f.length;n++){if(E=y(f[n],r)){if("break"==E.op)return;if("continue"==E.op)continue;if("return"==E.op)return E}}t[2]&&R(t[2],r)}}else if("forin"==e.structname){var m;t=e.oprs[0],f=e.oprs[1];"id"==t[0].structname?m=x(_=t[0].oprs[0],r):"memberexp"==t[0].structname&&(m=R(t[0].oprs[0],r),_="id"==t[0].oprs[1].structname?t[0].oprs[1].oprs[0]:R(t[0].oprs[1],r));s=R(t[1],r);for(var h in s){m[_]=h;for(n=0;n<f.length;n++){if(E=y(f[n],r)){if("break"==E.op)break;if("continue"==E.op)continue;if("return"==E.op)return E}}}}else if("while"==e.structname)for(t=e.oprs[1];;){if(0==(s=R(e.oprs[0],r)))break;if(t&&t.length)for(n=0;n<t.length;n++){if((E=y(t[n],r))&&"break"==E.op)return;if(E&&"continue"==E.op)break;if(E&&"return"==E.op)return E}}else if("dowhile"==e.structname)for(t=e.oprs[1];;){if(t&&t.length)for(n=0;n<t.length;n++){if((E=y(t[n],r))&&"break"==E.op)return;if(E&&"continue"==E.op)break;if(E&&"return"==E.op)return E}if(0==(s=R(e.oprs[0],r)))break}else{if("continue"==e.structname)return{op:"continue"};if("break"==e.structname)return{op:"break"};if("return"==e.structname){var E={op:"return"};return e.oprs[0]&&(E.v=R(e.oprs[0],r)),E}if("init"==e.structname){for(var _=e.oprs[0].oprs[0],v=r;v;){if("object"==typeof v.table){if(_ in v.table){s=R(e.oprs[1],r);v.table[_]=s;break}}else if(void 0!==v.table[_]){s=R(e.oprs[1],r);v.table[_]=s;break}v=v.prev}if(!e)throw new Error(_+" is not defined")}else"exp"==e.structname&&R(e,r)}}function R(e,r){if("exp"==e.structname){for(var n,t=0;t<e.oprs.length;t++)n=R(e.oprs[t],r);return n}if("memberexp"==e.structname)return(s=R(e.oprs[0],r))[m="id"==e.oprs[1].structname?e.oprs[1].oprs[0]:R(e.oprs[1],r)];if("id"==e.structname)return x(m=e.oprs[0],r)[m];if("this"==e.structname)return r.table.this;if("numliter"==e.structname)return parseFloat(e.oprs[0]);if("strliter"==e.structname)return e.oprs[0];if("boolliter"==e.structname)return"true"==e.oprs[0];if("nullliter"==e.structname)return null;if("objliter"==e.structname){var s={},o=e.oprs;for(t=0;t<o.length;t++){c="id"==o[t].oprs[0].structname?o[t].oprs[0].oprs[0]:R(o[t].oprs[0],r);var i=R(o[t].oprs[1],r);s[c]=i}return s}if("arrliter"==e.structname){o=e.oprs;var u=[];for(t=0;t<o.length;t++)o[t]?u.push(R(o[t],r)):u.push(void 0);return u}if("new"==e.structname){if((p=R(e.oprs[0],r))instanceof f){s={};return p.context=s,g(p,e.oprs[1]||[]),s.__proto__=p.prototype,s}throw new Error("not a constructor")}if("call"==e.structname){var p=R(e.oprs[0],r),a=null;a="memberexp"==e.oprs[0].structname?R(e.oprs[0].oprs[0],r):"with"==r.type?r.table:h;var l=[];for(t=0;t<e.oprs[1].oprs.length;t++)l.push(R(e.oprs[1].oprs[t],r));if(p instanceof f)return p.context=a,E=g(p,l);if(p instanceof Function)return p.apply(a,l)}else{if("callgetmember"==e.structname)return(E=R(e.oprs[0],r))[m="id"==e.oprs[1].structname?e.oprs[1].oprs[0]:R(e.oprs[1],r)];if("condexp"==e.structname){var c=R(e.oprs[0],r);return R(c?e.oprs[1]:e.oprs[2],r)}if("typeof"!=e.structname&&"="!=e.structname&&(c=R(e.oprs[0],r)),e.oprs[1]&&"delete"!=e.structname&&(i=R(e.oprs[1],r)),"+"==e.structname)return c+i;if("-"==e.structname)return c-i;if("*"==e.structname)return c*i;if("/"==e.structname)return c/i;if("%"==e.structname)return c%i;if(">"==e.structname)return c>i;if(">="==e.structname)return c>=i;if("<"==e.structname)return c<i;if("<="==e.structname)return c<=i;if("=="==e.structname)return c==i;if("!="==e.structname)return c!=i;if("==="==e.structname)return c===i;if("&"==e.structname)return c&i;if("^"==e.structname)return c^i;if("|"==e.structname)return c|i;if("&&"==e.structname)return c&&i;if("||"==e.structname)return c||i;if("instanceof"==e.structname)return c.__proto__===i.prototype;if("in"==e.structname)return i.hasOwnProperty(c);if("delete"==e.structname)return"memberexp"==e.oprs[0].structname&&(delete(c=R(e.oprs[0].oprs[0],r))[i="id"==e.oprs[0].oprs[1].structname?e.oprs[0].oprs[1].oprs[0]:R(e.oprs[0].oprs[1],r)],!0);if("void"==e.structname)return;if("typeof"!=e.structname){if("positive"==e.structname)return+c;if("negative"==e.structname)return-c;if("~"==e.structname)return~c;if("!"==e.structname)return!c;if("id"!=e.oprs[0].structname&&"memberexp"!=e.oprs[0].structname)throw new Error("Invalid left-hand side in assignment");var m;if("id"==e.oprs[0].structname){m=e.oprs[0].oprs[0];try{s=x(m,r)}catch(r){if("="!=e.structname)throw r;s=h.table}}else s=R(e.oprs[0].oprs[0],r),m="id"==e.oprs[0].oprs[1].structname?e.oprs[0].oprs[1].oprs[0]:R(e.oprs[0].oprs[1],r);if("="==e.structname)s[m]=i;else if("*="==e.structname)s[m]=c*i;else if("/="==e.structname)s[m]=c/i;else if("%="==e.structname)s[m]=c%i;else if("+="==e.structname)s[m]=c+i;else if("-="==e.structname)s[m]=c-i;else if("<<="==e.structname)s[m]=c<<i;else if(">>="==e.structname)s[m]=c>>i;else if(">>>="==e.structname)s[m]=c>>>i;else if("&="==e.structname)s[m]=c&i;else if("^="==e.structname)s[m]=c^i;else if("|="==e.structname)s[m]=c|i;else if("prefix++"==e.structname)++s[m];else{if("prefix--"!=e.structname){if("post++"==e.structname){var E=s[m];return s[m]++,E}if("post--"==e.structname){E=s[m];return s[m]--,E}throw new Error("Unknown Operator")}--s[m]}return s[m]}try{return typeof(c=R(e.oprs[0],r))}catch(e){return"undefined"}}}function A(){let e=new p(a,s.priority.LONG_FIRST,v,"Program");this.set=function(e,r){h.table[e]=r},this.run=function(r){e.parse(r);for(var n=0;n<m.oprs.length;n++)y(m.oprs[n],h)}}}])}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,